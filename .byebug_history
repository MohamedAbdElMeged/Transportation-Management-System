c
REDIS.get("total_trucks_count_in_db")
REDIS.get("total_trucks_count_in_db","5")
Truck.all.size
c
REDIS.get('total_trucks_count_in_db')
Truck.all.size
c
Truck.all.size
context_response
Truck.all.size
REDIS.get('total_trucks_count_in_db')
c
context.failure?
context
c
REDIS.get("next_page")
exit
REDIS.get("next_page")
c
REDIS.get("next_page")
c
REDIS.get("next_page")
c
REDIS.get("next_page")
c
REDIS.get("next_page")
c
n
c
REDIS.get('next_page')
c
REDIS.get('next_page')
REDIS
c
REDIS.get('next_page')
REDIS.id
c
REDIS.get("next_page")
REDIS.id
c
REDIS.flushdb
REDIS.get("next_page")
REDIS.get
REDIS.id
c
REDIS.id
c
REDIS.client_list
c
REDIS.get("next_page")
c
REDIS.get('next_page')
context
REDIS.get('next_page')
c
REDIS.get("next_page")
c
REDIS.get("next_page")
c
REDIS.get("next_page")
c
REDIS.get("next_page")
c
REDIS.get("next_page")
c
REDIS.get("next_page")
REDIS.ping
REDIS
c
REDIS.get("next_page")
context
REDIS.get("next_page")
c
REDIS.get("next_page")
context
REDIS.get("next_page")
c
REDIS.get("next_page")
c
REDIS.get("next_page")
context
c
REDIS.get("next_page")
c
REDIS.get("next_page")
c
n
context
c
context
c
n
c
REDIS.get("next_page")
c
REDIS.get("next_page")
context
c
context
c
context
c
REDIS.get("next_page")
context.response_headers&.[]('current-page').to_i
context.response_body_count < 25
context.response_body_count
c
context.response_headers&.[]('current-page').to_i
context.response_body_count < 25
context.response_body_count
context
REDIS.get("next_page")
c
context
c
REDIS.get("next_page")
context
c
context
REDIS.get("next_page")
c
REDIS.get("next_page")
context.success?
context
c
context
c
context
c
context.response_headers
context.response_body
c
context.response_body
context
c
context
c
expect(WebMock).to have_requested(:get, "#{ENV["TRUCK_API_URL"]}?page=1&")
c
context.url
contex.url
context
c
context.response_body
context
c
context
c
context
c
context.url == expected_url
context_url == expected_url
context.url
c
context.url
c
params
n
context
c
context
context.params
c
context
c
context
c
context
c
REDIS.get("next_page")
c
context
REDIS.set("next_page",5)
c
REDIS.get("next_page")
c
context
c
context
REDIS.get('next_page')
c
@driver.drivers_trucks
@driver.driver_trucks
@driver
c
context
c
context.success?
context
c
Driver.first
context
c
context.failure?
context
c
@driver
driver.success?
driver
login_params
c
login_params
c
login_params
c
login_params
c
driver.success?
driver
c
unless driver || driver&.authenticate("test password")
    puts "failed"
end
unless driver || driver&.authenticate("test password")
driver = Driver.find_by(email: "adriene@boehm.test")
driver = Driver.find_by(email:"adriene@boehm.test)
driver.authenticate("test password")
driver = Driver.first
Driver.all
json
c
n
c
json.pluck("assigned_at")
json
json.pluck("assinged_at")
c
json.pluck("id")
json.pluck(:id)
json
c
json
response.status
c
json
c
truck.id
response
json
c
truck
json
c
token
c
token
c
json
response.status
c
json
c
json
response
c
